// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: ml.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MLServiceClient is the client API for MLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MLServiceClient interface {
	DetectObjects(ctx context.Context, opts ...grpc.CallOption) (MLService_DetectObjectsClient, error)
}

type mLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLServiceClient(cc grpc.ClientConnInterface) MLServiceClient {
	return &mLServiceClient{cc}
}

func (c *mLServiceClient) DetectObjects(ctx context.Context, opts ...grpc.CallOption) (MLService_DetectObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MLService_ServiceDesc.Streams[0], "/ml.MLService/DetectObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &mLServiceDetectObjectsClient{stream}
	return x, nil
}

type MLService_DetectObjectsClient interface {
	Send(*ImageRequest) error
	Recv() (*ImageResponse, error)
	grpc.ClientStream
}

type mLServiceDetectObjectsClient struct {
	grpc.ClientStream
}

func (x *mLServiceDetectObjectsClient) Send(m *ImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mLServiceDetectObjectsClient) Recv() (*ImageResponse, error) {
	m := new(ImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MLServiceServer is the server API for MLService service.
// All implementations must embed UnimplementedMLServiceServer
// for forward compatibility
type MLServiceServer interface {
	DetectObjects(MLService_DetectObjectsServer) error
	mustEmbedUnimplementedMLServiceServer()
}

// UnimplementedMLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMLServiceServer struct {
}

func (UnimplementedMLServiceServer) DetectObjects(MLService_DetectObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectObjects not implemented")
}
func (UnimplementedMLServiceServer) mustEmbedUnimplementedMLServiceServer() {}

// UnsafeMLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLServiceServer will
// result in compilation errors.
type UnsafeMLServiceServer interface {
	mustEmbedUnimplementedMLServiceServer()
}

func RegisterMLServiceServer(s grpc.ServiceRegistrar, srv MLServiceServer) {
	s.RegisterService(&MLService_ServiceDesc, srv)
}

func _MLService_DetectObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MLServiceServer).DetectObjects(&mLServiceDetectObjectsServer{stream})
}

type MLService_DetectObjectsServer interface {
	Send(*ImageResponse) error
	Recv() (*ImageRequest, error)
	grpc.ServerStream
}

type mLServiceDetectObjectsServer struct {
	grpc.ServerStream
}

func (x *mLServiceDetectObjectsServer) Send(m *ImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mLServiceDetectObjectsServer) Recv() (*ImageRequest, error) {
	m := new(ImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MLService_ServiceDesc is the grpc.ServiceDesc for MLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ml.MLService",
	HandlerType: (*MLServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectObjects",
			Handler:       _MLService_DetectObjects_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ml.proto",
}
